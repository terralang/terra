name: CI
on:
  push:
  pull_request:
  schedule:
    - cron: '5 4 * * 2' # once a week on Tuesday

jobs:
  check_format:
    name: Check Format
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v1
      - run: ./travis.sh
        env:
          CHECK_CLANG_FORMAT: 1
  build:
    name: Build (${{ matrix.os }}, llvm-${{ matrix.llvm }}, cmake=${{ matrix.cmake }}, cuda=${{ matrix.cuda }}, ${{ matrix.lua }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ['ubuntu-22.04', 'macos-11', 'windows-2022']
        llvm: ['6.0', '7', '8', '9', '10', '11', '12', '13', '14', '15']
        cmake: ['0', '1']
        cuda: ['0', '1']
        lua: ['luajit', 'moonjit']
        exclude:
          # Linux: exclude LLVM 6.0-13, 15, cmake
          # Note: CMake configurations are tested in Docker
          - os: 'ubuntu-22.04'
            llvm: '6.0'
          - os: 'ubuntu-22.04'
            llvm: '7'
          - os: 'ubuntu-22.04'
            llvm: '8'
          - os: 'ubuntu-22.04'
            llvm: '9'
          - os: 'ubuntu-22.04'
            llvm: '10'
          - os: 'ubuntu-22.04'
            llvm: '11'
          - os: 'ubuntu-22.04'
            llvm: '12'
          - os: 'ubuntu-22.04'
            llvm: '13'
          - os: 'ubuntu-22.04'
            llvm: '15'
          - os: 'ubuntu-22.04'
            cmake: '1'

          # macOS: exclude LLVM 8-15 make, cuda
          - os: 'macos-11'
            llvm: '8'
            cmake: '0'
          - os: 'macos-11'
            llvm: '9'
            cmake: '0'
          - os: 'macos-11'
            llvm: '10'
            cmake: '0'
          - os: 'macos-11'
            llvm: '11'
            cmake: '0'
          - os: 'macos-11'
            llvm: '12'
            cmake: '0'
          - os: 'macos-11'
            llvm: '13'
            cmake: '0'
          - os: 'macos-11'
            llvm: '14'
            cmake: '0'
          - os: 'macos-11'
            llvm: '15'
            cmake: '0'
          - os: 'macos-11'
            cuda: '1'
          # LLVM 10 binaries are broken on recent macOS
          - os: 'macos-11'
            llvm: '10'

          # Windows: exclude LLVM 6.0-10,12-15, make
          - os: 'windows-2022'
            llvm: '6.0'
          - os: 'windows-2022'
            llvm: '7'
          - os: 'windows-2022'
            llvm: '8'
          - os: 'windows-2022'
            llvm: '9'
          - os: 'windows-2022'
            llvm: '10'
          - os: 'windows-2022'
            llvm: '12'
          - os: 'windows-2022'
            llvm: '13'
          - os: 'windows-2022'
            llvm: '14'
          - os: 'windows-2022'
            llvm: '15'
          - os: 'windows-2022'
            cmake: '0'

          # CMake
          - llvm: '7'
            cmake: '0'

          # Moonjit requires CMake
          - cmake: '0'
            lua: 'moonjit'

          # CUDA: only LLVM 11
          - llvm: '6.0'
            cuda: '1'
          - llvm: '7'
            cuda: '1'
          - llvm: '8'
            cuda: '1'
          - llvm: '9'
            cuda: '1'
          - llvm: '10'
            cuda: '1'
          - llvm: '12'
            cuda: '1'
          - llvm: '13'
            cuda: '1'
          - llvm: '14'
            cuda: '1'
          - llvm: '15'
            cuda: '1'

          # Moonjit: only LLVM 9
          - llvm: '6.0'
            lua: 'moonjit'
          - llvm: '7'
            lua: 'moonjit'
          - llvm: '8'
            lua: 'moonjit'
          - llvm: '10'
            lua: 'moonjit'
          - llvm: '11'
            lua: 'moonjit'
          - llvm: '12'
            lua: 'moonjit'
          - llvm: '13'
            lua: 'moonjit'
          - llvm: '14'
            lua: 'moonjit'
          - llvm: '15'
            lua: 'moonjit'
    steps:
      - uses: actions/checkout@v1
      - run: ./travis.sh
        shell: bash
        env:
          LLVM_CONFIG: llvm-config-${{ matrix.llvm }}
          CLANG: clang-${{ matrix.llvm }}
          USE_CMAKE: ${{ matrix.cmake }}
          USE_CUDA: ${{ matrix.cuda }}
          STATIC_LLVM: 1
          STATIC_LUAJIT: 1
          SLIB_INCLUDE_LLVM: 1
          SLIB_INCLUDE_LUAJIT: 1
          TERRA_LUA: ${{ matrix.lua }}
      - uses: actions/upload-artifact@v2
        with:
          name: terra-${{ matrix.os }}-x86_64-llvm-${{ matrix.llvm }}
          path: |
            terra-*.tar.xz
            terra-*.7z
  docker:
    name: Docker (${{ matrix.distro }}, llvm-${{ matrix.llvm }}, ${{ matrix.lua }}, static=${{ matrix.static }}, slib=${{ matrix.slib }}, cuda=${{ matrix.cuda }}, ${{ matrix.variant }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        distro: ['ubuntu-18.04']
        llvm: ['6.0', '7', '8', '9', '10', '11', '12.0.1', '13.0.1', '14.0.6', '15.0.2']
        lua: ['luajit', 'moonjit']
        static: ['0', '1']
        slib: ['0', '1']
        cuda: ['0', '1']
        test: ['1']
        exclude:
          # CUDA with LLVM 9 only:
          - llvm: '6.0'
            cuda: '1'
          - llvm: '7'
            cuda: '1'
          - llvm: '8'
            cuda: '1'
          - llvm: '10'
            cuda: '1'
          - llvm: '11'
            cuda: '1'
          - llvm: '12.0.1'
            cuda: '1'
          - llvm: '13.0.1'
            cuda: '1'
          - llvm: '14.0.6'
            cuda: '1'
          - llvm: '15.0.2'
            cuda: '1'

          # Moonjit with LLVM 10 only:
          - llvm: '6.0'
            lua: 'moonjit'
          - llvm: '7'
            lua: 'moonjit'
          - llvm: '8'
            lua: 'moonjit'
          - llvm: '9'
            lua: 'moonjit'
          - llvm: '11'
            lua: 'moonjit'
          - llvm: '12.0.1'
            lua: 'moonjit'
          - llvm: '13.0.1'
            lua: 'moonjit'
          - llvm: '14.0.6'
            lua: 'moonjit'
          - llvm: '15.0.2'
            lua: 'moonjit'

          # no-static with LLVM 10 only:
          - llvm: '6.0'
            static: '0'
          - llvm: '7'
            static: '0'
          - llvm: '8'
            static: '0'
          - llvm: '9'
            static: '0'
          - llvm: '11'
            static: '0'
          - llvm: '12.0.1'
            static: '0'
          - llvm: '13.0.1'
            static: '0'
          - llvm: '14.0.6'
            static: '0'
          - llvm: '15.0.2'
            static: '0'

          # no-slib with LLVM 10 only:
          - llvm: '6.0'
            slib: '0'
          - llvm: '7'
            slib: '0'
          - llvm: '8'
            slib: '0'
          - llvm: '9'
            slib: '0'
          - llvm: '11'
            slib: '0'
          - llvm: '12.0.1'
            slib: '0'
          - llvm: '13.0.1'
            slib: '0'
          - llvm: '14.0.6'
            slib: '0'
          - llvm: '15.0.2'
            slib: '0'

          # slib requires static
          - static: '0'
            slib: '1'

        include:
          # Assign variants to the basic configurations:
          - variant: 'package'
          - llvm: '11'
            variant: 'upstream'
          - llvm: '12.0.1'
            variant: 'prebuilt'
          - llvm: '13.0.1'
            variant: 'prebuilt'
          - llvm: '14.0.6'
            variant: 'prebuilt'
          - llvm: '15.0.2'
            variant: 'prebuilt'

          # Some additional configurations:

          # LLVM 6.0 on Ubuntu 16.04, 20.04
          - distro: 'ubuntu-16.04'
            llvm: '6.0'
            lua: 'luajit'
            cuda: '0'
            variant: 'package'
            test: '1'
          - distro: 'ubuntu-20.04'
            llvm: '6.0'
            lua: 'luajit'
            cuda: '0'
            variant: 'package'
            test: '1'

          # LLVM 12, 13, 14 on Ubuntu 22.04
          - distro: 'ubuntu-22.04'
            llvm: '12'
            lua: 'luajit'
            cuda: '0'
            variant: 'package'
            test: '1'
          - distro: 'ubuntu-22.04'
            llvm: '13'
            lua: 'luajit'
            cuda: '0'
            variant: 'package'
            test: '1'
          - distro: 'ubuntu-22.04'
            llvm: '14'
            lua: 'luajit'
            cuda: '0'
            variant: 'package'
            test: '1'
    steps:
      - uses: actions/checkout@v1
      - run: ./travis.sh
        env:
          DOCKER_DISTRO: ${{ matrix.distro }}
          DOCKER_LLVM: ${{ matrix.llvm }}
          DOCKER_LUA: ${{ matrix.lua }}
          DOCKER_STATIC: ${{ matrix.static }}
          DOCKER_SLIB: ${{ matrix.slib }}
          DOCKER_CUDA: ${{ matrix.cuda }}
          DOCKER_VARIANT: ${{ matrix.variant }}
          DOCKER_TEST: ${{ matrix.test }}
  multiarch:
    name: Multiarch (${{ matrix.distro }}, ${{ matrix.arch }}, llvm-${{ matrix.llvm }}, cuda=${{ matrix.cuda }}, ${{ matrix.variant }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        distro: ['ubuntu-18.04']
        arch: ['arm64', 'ppc64le']
        llvm: ['11.1.0', '13.0.0']
        variant: ['prebuilt']
        cuda: ['0']
        test: ['0']
        exclude:
          - arch: 'arm64'
            llvm: '13.0.0'
          - arch: 'ppc64le'
            llvm: '11.1.0'
    steps:
      - uses: actions/checkout@v1
      - run: ./travis.sh
        env:
          DOCKER_DISTRO: ${{ matrix.distro }}
          DOCKER_ARCH: ${{ matrix.arch }}
          DOCKER_LLVM: ${{ matrix.llvm }}
          DOCKER_CUDA: ${{ matrix.cuda }}
          DOCKER_VARIANT: ${{ matrix.variant }}
          DOCKER_TEST: ${{ matrix.test }}
      - uses: actions/upload-artifact@v2
        with:
          name: docker-${{ matrix.distro }}-${{ matrix.arch }}-llvm-${{ matrix.llvm }}
          path: |
            terra-*.tar.xz
            terra-*.7z
  compat:
    name: Compatibility Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - run: ./docker/compatibility_test.sh ubuntu 18.04 "18.04 20.04 22.04" "" 13.0.1 luajit prebuilt 2
      - uses: actions/upload-artifact@v2
        with:
          name: docker-ubuntu-18.04-x86_64-llvm-13
          path: |
            terra-*.tar.xz
            terra-*.7z
  nix:
    name: Nix Build (nixpkgs-${{ matrix.nixpkgs }}, enableCUDA=${{ matrix.cuda }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        nixpkgs: ['unstable', '22.05']
        cuda: ['false', 'true']
    steps:
      - uses: actions/checkout@v2.3.4
      - uses: cachix/install-nix-action@v13
        with:
          nix_path: nixpkgs=channel:nixos-${{ matrix.nixpkgs }}
      - run: nix-build --arg enableCUDA ${{ matrix.cuda }}
        env:
          NIXPKGS_ALLOW_UNFREE: 1
